apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionName "1.4.3"
        versionCode 22
    }

    productFlavors.all {
        ext.appName = null
    }

    productFlavors {
        openHPI {
            applicationId "de.xikolo.openhpi"
            buildConfigField "de.xikolo.util.BuildFlavor", "buildFlavor", "de.xikolo.util.BuildFlavor.OPEN_HPI"
            manifestPlaceholders = [webUrl: "open.hpi.de"]
            appName = "openHPI"
        }
        openHPIcn {
            applicationId "de.xikolo.openhpi.cn"
            buildConfigField "de.xikolo.util.BuildFlavor", "buildFlavor", "de.xikolo.util.BuildFlavor.OPEN_HPI_CN"
            manifestPlaceholders = [webUrl: "openhpi.cn"]
            appName = "openHPI CN"
        }
        openSAP {
            applicationId "de.xikolo.opensap"
            buildConfigField "de.xikolo.util.BuildFlavor", "buildFlavor", "de.xikolo.util.BuildFlavor.OPEN_SAP"
            manifestPlaceholders = [webUrl: "open.sap.com"]
            appName = "openSAP"
        }
        moocHouse {
            applicationId "de.xikolo.moochouse"
            buildConfigField "de.xikolo.util.BuildFlavor", "buildFlavor", "de.xikolo.util.BuildFlavor.MOOC_HOUSE"
            manifestPlaceholders = [webUrl: "mooc.house"]
            appName = "mooc.house"
        }
        openUNE {
            applicationId "de.xikolo.openune"
            buildConfigField "de.xikolo.util.BuildFlavor", "buildFlavor", "de.xikolo.util.BuildFlavor.OPEN_UNE"
            manifestPlaceholders = [webUrl: "openune.cn"]
            appName = "openUNE"
        }
    }
    signingConfigs {
        if (rootProject.file('signing.properties').exists()) {
            def props = new Properties()
            props.load(new FileInputStream(rootProject.file('signing.properties')))
            openHPI {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENHPI
                keyPassword props.RELEASE_KEY_PASSWORD_OPENHPI
            }
            openHPIcn {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENHPI_CN
                keyPassword props.RELEASE_KEY_PASSWORD_OPENHPI_CN
            }
            openSAP {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENSAP
                keyPassword props.RELEASE_KEY_PASSWORD_OPENSAP
            }
            moocHouse {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_MOOCHOUSE
                keyPassword props.RELEASE_KEY_PASSWORD_MOOCHOUSE
            }
            openUNE {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENUNE
                keyPassword props.RELEASE_KEY_PASSWORD_OPENUNE
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "de.xikolo.util.BuildType", "buildType", "de.xikolo.util.BuildType.RELEASE"
            debuggable false
            zipAlignEnabled true

            if (rootProject.file('signing.properties').exists()) {
                productFlavors.openHPI.signingConfig signingConfigs.openHPI
                productFlavors.openHPIcn.signingConfig signingConfigs.openHPIcn
                productFlavors.openSAP.signingConfig signingConfigs.openSAP
                productFlavors.moocHouse.signingConfig signingConfigs.moocHouse
                productFlavors.openUNE.signingConfig signingConfigs.openUNE
            }
        }
        debug {
            minifyEnabled false
            buildConfigField "de.xikolo.util.BuildType", "buildType", "de.xikolo.util.BuildType.DEBUG"
            shrinkResources false
            debuggable true

            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    applicationVariants.all { variant ->
        def name = variant.productFlavors.get(0).ext.appName
        if (variant.buildType.name == "debug") {
            name += " Debug"
        }
        variant.resValue "string", "app_name", name
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'UnusedAttribute'
    }
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
}

dependencies {
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.birbit:android-priority-jobqueue:1.3.4'
    compile 'de.greenrobot:eventbus:2.4.0'

    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.google.android.libraries.cast.companionlibrary:ccl:2.8.3'
    compile 'com.google.android.gms:play-services-cast:8.4.0'

    def supportVersion = '23.3.0'

    compile "com.android.support:support-v4:${supportVersion}"
    compile "com.android.support:appcompat-v7:${supportVersion}"
    compile "com.android.support:cardview-v7:${supportVersion}"
    compile "com.android.support:recyclerview-v7:${supportVersion}"
    compile "com.android.support:mediarouter-v7:${supportVersion}"
    compile "com.android.support:design:${supportVersion}"
    compile "com.android.support:preference-v14:${supportVersion}"

    compile project(":lanalytics")

    compile fileTree(include: ['*.jar'], dir: 'libs')
}
